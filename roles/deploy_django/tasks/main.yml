---
- name: create project directory
  file: path={{ project_dir }} state=directory owner="{{ username }}"

#- name: create logs directory
#  file: path={{ project_dir }}/logs state=directory owner="{{ username }}"

#- name: create project home directory
#  file: path={{ project_homedir }} state=directory owner="{{ username }}"

# tasks file for deploy_django
- name: Clone/pull project repo
  git: repo={{ project_repo }} dest={{ project_dir }} accept_hostkey=yes

#- name: permissions are set properly
#  file: path={{ project_homedir }}
#        owner={{  username  }}
#        group={{  username  }}
#        state=directory

- name: create virtualenv
  command: virtualenv {{ env }} creates="{{ env }}"{% if requirements %}requirements={{ project_homedir }}/{{ requirements }}{% endif %}

- name: Install required pip packages
  pip:
    name:
      - django
      - gunicorn
    virtualenv: "{{ env }}"


- name: virtualenv | ensure that permissions are set properly
  file: path={{ env }}
        owner={{  username  }}
        group={{  username  }}
        state=directory

#- name: create project
#	  command: "{{ venv }}/bin/activate django-admin.py startproject {{ project_name }} {{ project_homedir }}"

#- name: django startproject
#  shell:
#    with_items:
#      "{{ venv }}/bin/activate"
#      django-admin startproject {{ env }} /{{ project_name }}
#  args:
#     creates: {{ project_name }}

#- name: django startapp
#  shell: cd {{ project_name }} ; python manage.py startapp {{ project_name }}
#  args:
#     creates: {{env}} {{ project_name }}

- name: copy local_settings.py
  template: src=settings.py.j2 dest={{ project_homedir }}/{{ local_settings }}

- name: copy gunicorn config
  become: yes
  template: src=gunicorn.j2 dest=/etc/init/gunicorn.conf
  notify:
   - restart gunicorn


###############################################

#- name: syncdb (for django<1.7)
#  django_manage: command=syncdb virtualenv={{ env }}/{{ project_name }} app_path={{ project_homedir }}

- name: migrate database
  django_manage: command=migrate virtualenv={{ env }}/{{ project_name }} app_path={{ project_homedir }}

- name: collectstatic
  django_manage: command=collectstatic virtualenv={{ env }}/{{ project_name }} app_path={{ project_homedir }}

###############################################

#- name: copy gunicorn config
#  template: src=files/gunicorn.j2 dest=/etc/init/gunicorn.conf
#  notify:
#   - restart gunicorn

#- name: run gunicorn as ansible user with specified pid and config file
#  gunicorn:
#    app: "wsgi-module"
#    chdir: '/workspace/example'
#    conf: '/workspace/example/gunicorn.cfg'
#    venv: '/workspace/example/venv'
#    pid: '/workspace/example/gunicorn.pid'
#    user: 'ansible'
#
- name: make sure nginx server is running
  service: name=nginx state=started enabled=yes

- name: make sure gunicorn server is running
  service: name=gunicorn state=started enabled=yes
